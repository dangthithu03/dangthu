#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebsiteBanHang
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WebsiteBH")]
	public partial class dbWebsiteBHDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLoaiSanPham(LoaiSanPham instance);
    partial void UpdateLoaiSanPham(LoaiSanPham instance);
    partial void DeleteLoaiSanPham(LoaiSanPham instance);
    partial void InsertLoaiTinTuc(LoaiTinTuc instance);
    partial void UpdateLoaiTinTuc(LoaiTinTuc instance);
    partial void DeleteLoaiTinTuc(LoaiTinTuc instance);
    partial void InsertLoginForm(LoginForm instance);
    partial void UpdateLoginForm(LoginForm instance);
    partial void DeleteLoginForm(LoginForm instance);
    partial void InsertSanPham(SanPham instance);
    partial void UpdateSanPham(SanPham instance);
    partial void DeleteSanPham(SanPham instance);
    partial void InsertTinTuc(TinTuc instance);
    partial void UpdateTinTuc(TinTuc instance);
    partial void DeleteTinTuc(TinTuc instance);
    partial void Inserttrangcon(trangcon instance);
    partial void Updatetrangcon(trangcon instance);
    partial void Deletetrangcon(trangcon instance);
    #endregion
		
		public dbWebsiteBHDataContext() :
        base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WebsiteBHConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbWebsiteBHDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbWebsiteBHDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbWebsiteBHDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbWebsiteBHDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LoaiSanPham> LoaiSanPhams
		{
			get
			{
				return this.GetTable<LoaiSanPham>();
			}
		}
		
		public System.Data.Linq.Table<LoaiTinTuc> LoaiTinTucs
		{
			get
			{
				return this.GetTable<LoaiTinTuc>();
			}
		}
		
		public System.Data.Linq.Table<LoginForm> LoginForms
		{
			get
			{
				return this.GetTable<LoginForm>();
			}
		}
		
		public System.Data.Linq.Table<SanPham> SanPhams
		{
			get
			{
				return this.GetTable<SanPham>();
			}
		}
		
		public System.Data.Linq.Table<TinTuc> TinTucs
		{
			get
			{
				return this.GetTable<TinTuc>();
			}
		}
		
		public System.Data.Linq.Table<trangcon> trangcons
		{
			get
			{
				return this.GetTable<trangcon>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoaiSanPham")]
	public partial class LoaiSanPham : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaLoaiSP;
		
		private string _TenLoaiSP;
		
		private string _GhiChu;
		
		private EntitySet<SanPham> _SanPhams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaLoaiSPChanging(int value);
    partial void OnMaLoaiSPChanged();
    partial void OnTenLoaiSPChanging(string value);
    partial void OnTenLoaiSPChanged();
    partial void OnGhiChuChanging(string value);
    partial void OnGhiChuChanged();
    #endregion
		
		public LoaiSanPham()
		{
			this._SanPhams = new EntitySet<SanPham>(new Action<SanPham>(this.attach_SanPhams), new Action<SanPham>(this.detach_SanPhams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLoaiSP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaLoaiSP
		{
			get
			{
				return this._MaLoaiSP;
			}
			set
			{
				if ((this._MaLoaiSP != value))
				{
					this.OnMaLoaiSPChanging(value);
					this.SendPropertyChanging();
					this._MaLoaiSP = value;
					this.SendPropertyChanged("MaLoaiSP");
					this.OnMaLoaiSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiSP", DbType="NVarChar(100)")]
		public string TenLoaiSP
		{
			get
			{
				return this._TenLoaiSP;
			}
			set
			{
				if ((this._TenLoaiSP != value))
				{
					this.OnTenLoaiSPChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiSP = value;
					this.SendPropertyChanged("TenLoaiSP");
					this.OnTenLoaiSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GhiChu", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string GhiChu
		{
			get
			{
				return this._GhiChu;
			}
			set
			{
				if ((this._GhiChu != value))
				{
					this.OnGhiChuChanging(value);
					this.SendPropertyChanging();
					this._GhiChu = value;
					this.SendPropertyChanged("GhiChu");
					this.OnGhiChuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiSanPham_SanPham", Storage="_SanPhams", ThisKey="MaLoaiSP", OtherKey="MaLoaiSP")]
		public EntitySet<SanPham> SanPhams
		{
			get
			{
				return this._SanPhams;
			}
			set
			{
				this._SanPhams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SanPhams(SanPham entity)
		{
			this.SendPropertyChanging();
			entity.LoaiSanPham = this;
		}
		
		private void detach_SanPhams(SanPham entity)
		{
			this.SendPropertyChanging();
			entity.LoaiSanPham = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoaiTinTuc")]
	public partial class LoaiTinTuc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaLoaiTT;
		
		private string _TenLoaiTT;
		
		private string _GhiChu;
		
		private EntitySet<TinTuc> _TinTucs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaLoaiTTChanging(int value);
    partial void OnMaLoaiTTChanged();
    partial void OnTenLoaiTTChanging(string value);
    partial void OnTenLoaiTTChanged();
    partial void OnGhiChuChanging(string value);
    partial void OnGhiChuChanged();
    #endregion
		
		public LoaiTinTuc()
		{
			this._TinTucs = new EntitySet<TinTuc>(new Action<TinTuc>(this.attach_TinTucs), new Action<TinTuc>(this.detach_TinTucs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLoaiTT", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaLoaiTT
		{
			get
			{
				return this._MaLoaiTT;
			}
			set
			{
				if ((this._MaLoaiTT != value))
				{
					this.OnMaLoaiTTChanging(value);
					this.SendPropertyChanging();
					this._MaLoaiTT = value;
					this.SendPropertyChanged("MaLoaiTT");
					this.OnMaLoaiTTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiTT", DbType="NVarChar(100)")]
		public string TenLoaiTT
		{
			get
			{
				return this._TenLoaiTT;
			}
			set
			{
				if ((this._TenLoaiTT != value))
				{
					this.OnTenLoaiTTChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiTT = value;
					this.SendPropertyChanged("TenLoaiTT");
					this.OnTenLoaiTTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GhiChu", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string GhiChu
		{
			get
			{
				return this._GhiChu;
			}
			set
			{
				if ((this._GhiChu != value))
				{
					this.OnGhiChuChanging(value);
					this.SendPropertyChanging();
					this._GhiChu = value;
					this.SendPropertyChanged("GhiChu");
					this.OnGhiChuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiTinTuc_TinTuc", Storage="_TinTucs", ThisKey="MaLoaiTT", OtherKey="MaLoaiTT")]
		public EntitySet<TinTuc> TinTucs
		{
			get
			{
				return this._TinTucs;
			}
			set
			{
				this._TinTucs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TinTucs(TinTuc entity)
		{
			this.SendPropertyChanging();
			entity.LoaiTinTuc = this;
		}
		
		private void detach_TinTucs(TinTuc entity)
		{
			this.SendPropertyChanging();
			entity.LoaiTinTuc = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoginForm")]
	public partial class LoginForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaLog;
		
		private string _Username;
		
		private string _Pass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaLogChanging(int value);
    partial void OnMaLogChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    #endregion
		
		public LoginForm()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLog", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaLog
		{
			get
			{
				return this._MaLog;
			}
			set
			{
				if ((this._MaLog != value))
				{
					this.OnMaLogChanging(value);
					this.SendPropertyChanging();
					this._MaLog = value;
					this.SendPropertyChanged("MaLog");
					this.OnMaLogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="NVarChar(50)")]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SanPham")]
	public partial class SanPham : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaSP;
		
		private string _TenSP;
		
		private System.Nullable<int> _MaLoaiSP;
		
		private System.Nullable<double> _GiaSP;
		
		private string _AnhSP;
		
		private string _ChitietSP;
		
		private EntityRef<LoaiSanPham> _LoaiSanPham;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaSPChanging(int value);
    partial void OnMaSPChanged();
    partial void OnTenSPChanging(string value);
    partial void OnTenSPChanged();
    partial void OnMaLoaiSPChanging(System.Nullable<int> value);
    partial void OnMaLoaiSPChanged();
    partial void OnGiaSPChanging(System.Nullable<double> value);
    partial void OnGiaSPChanged();
    partial void OnAnhSPChanging(string value);
    partial void OnAnhSPChanged();
    partial void OnChitietSPChanging(string value);
    partial void OnChitietSPChanged();
    #endregion
		
		public SanPham()
		{
			this._LoaiSanPham = default(EntityRef<LoaiSanPham>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaSP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaSP
		{
			get
			{
				return this._MaSP;
			}
			set
			{
				if ((this._MaSP != value))
				{
					this.OnMaSPChanging(value);
					this.SendPropertyChanging();
					this._MaSP = value;
					this.SendPropertyChanged("MaSP");
					this.OnMaSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenSP", DbType="NVarChar(100)")]
		public string TenSP
		{
			get
			{
				return this._TenSP;
			}
			set
			{
				if ((this._TenSP != value))
				{
					this.OnTenSPChanging(value);
					this.SendPropertyChanging();
					this._TenSP = value;
					this.SendPropertyChanged("TenSP");
					this.OnTenSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLoaiSP", DbType="Int")]
		public System.Nullable<int> MaLoaiSP
		{
			get
			{
				return this._MaLoaiSP;
			}
			set
			{
				if ((this._MaLoaiSP != value))
				{
					if (this._LoaiSanPham.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaLoaiSPChanging(value);
					this.SendPropertyChanging();
					this._MaLoaiSP = value;
					this.SendPropertyChanged("MaLoaiSP");
					this.OnMaLoaiSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiaSP", DbType="Float")]
		public System.Nullable<double> GiaSP
		{
			get
			{
				return this._GiaSP;
			}
			set
			{
				if ((this._GiaSP != value))
				{
					this.OnGiaSPChanging(value);
					this.SendPropertyChanging();
					this._GiaSP = value;
					this.SendPropertyChanged("GiaSP");
					this.OnGiaSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnhSP", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string AnhSP
		{
			get
			{
				return this._AnhSP;
			}
			set
			{
				if ((this._AnhSP != value))
				{
					this.OnAnhSPChanging(value);
					this.SendPropertyChanging();
					this._AnhSP = value;
					this.SendPropertyChanged("AnhSP");
					this.OnAnhSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChitietSP", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string ChitietSP
		{
			get
			{
				return this._ChitietSP;
			}
			set
			{
				if ((this._ChitietSP != value))
				{
					this.OnChitietSPChanging(value);
					this.SendPropertyChanging();
					this._ChitietSP = value;
					this.SendPropertyChanged("ChitietSP");
					this.OnChitietSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiSanPham_SanPham", Storage="_LoaiSanPham", ThisKey="MaLoaiSP", OtherKey="MaLoaiSP", IsForeignKey=true)]
		public LoaiSanPham LoaiSanPham
		{
			get
			{
				return this._LoaiSanPham.Entity;
			}
			set
			{
				LoaiSanPham previousValue = this._LoaiSanPham.Entity;
				if (((previousValue != value) 
							|| (this._LoaiSanPham.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoaiSanPham.Entity = null;
						previousValue.SanPhams.Remove(this);
					}
					this._LoaiSanPham.Entity = value;
					if ((value != null))
					{
						value.SanPhams.Add(this);
						this._MaLoaiSP = value.MaLoaiSP;
					}
					else
					{
						this._MaLoaiSP = default(Nullable<int>);
					}
					this.SendPropertyChanged("LoaiSanPham");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TinTuc")]
	public partial class TinTuc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaTT;
		
		private string _TieuDe;
		
		private System.Nullable<int> _MaLoaiTT;
		
		private string _MoTa;
		
		private string _AnhTT;
		
		private string _ChitietTT;
		
		private EntityRef<LoaiTinTuc> _LoaiTinTuc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaTTChanging(int value);
    partial void OnMaTTChanged();
    partial void OnTieuDeChanging(string value);
    partial void OnTieuDeChanged();
    partial void OnMaLoaiTTChanging(System.Nullable<int> value);
    partial void OnMaLoaiTTChanged();
    partial void OnMoTaChanging(string value);
    partial void OnMoTaChanged();
    partial void OnAnhTTChanging(string value);
    partial void OnAnhTTChanged();
    partial void OnChitietTTChanging(string value);
    partial void OnChitietTTChanged();
    #endregion
		
		public TinTuc()
		{
			this._LoaiTinTuc = default(EntityRef<LoaiTinTuc>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTT", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaTT
		{
			get
			{
				return this._MaTT;
			}
			set
			{
				if ((this._MaTT != value))
				{
					this.OnMaTTChanging(value);
					this.SendPropertyChanging();
					this._MaTT = value;
					this.SendPropertyChanged("MaTT");
					this.OnMaTTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TieuDe", DbType="NVarChar(100)")]
		public string TieuDe
		{
			get
			{
				return this._TieuDe;
			}
			set
			{
				if ((this._TieuDe != value))
				{
					this.OnTieuDeChanging(value);
					this.SendPropertyChanging();
					this._TieuDe = value;
					this.SendPropertyChanged("TieuDe");
					this.OnTieuDeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLoaiTT", DbType="Int")]
		public System.Nullable<int> MaLoaiTT
		{
			get
			{
				return this._MaLoaiTT;
			}
			set
			{
				if ((this._MaLoaiTT != value))
				{
					if (this._LoaiTinTuc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaLoaiTTChanging(value);
					this.SendPropertyChanging();
					this._MaLoaiTT = value;
					this.SendPropertyChanged("MaLoaiTT");
					this.OnMaLoaiTTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoTa", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string MoTa
		{
			get
			{
				return this._MoTa;
			}
			set
			{
				if ((this._MoTa != value))
				{
					this.OnMoTaChanging(value);
					this.SendPropertyChanging();
					this._MoTa = value;
					this.SendPropertyChanged("MoTa");
					this.OnMoTaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnhTT", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string AnhTT
		{
			get
			{
				return this._AnhTT;
			}
			set
			{
				if ((this._AnhTT != value))
				{
					this.OnAnhTTChanging(value);
					this.SendPropertyChanging();
					this._AnhTT = value;
					this.SendPropertyChanged("AnhTT");
					this.OnAnhTTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChitietTT", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string ChitietTT
		{
			get
			{
				return this._ChitietTT;
			}
			set
			{
				if ((this._ChitietTT != value))
				{
					this.OnChitietTTChanging(value);
					this.SendPropertyChanging();
					this._ChitietTT = value;
					this.SendPropertyChanged("ChitietTT");
					this.OnChitietTTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiTinTuc_TinTuc", Storage="_LoaiTinTuc", ThisKey="MaLoaiTT", OtherKey="MaLoaiTT", IsForeignKey=true)]
		public LoaiTinTuc LoaiTinTuc
		{
			get
			{
				return this._LoaiTinTuc.Entity;
			}
			set
			{
				LoaiTinTuc previousValue = this._LoaiTinTuc.Entity;
				if (((previousValue != value) 
							|| (this._LoaiTinTuc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoaiTinTuc.Entity = null;
						previousValue.TinTucs.Remove(this);
					}
					this._LoaiTinTuc.Entity = value;
					if ((value != null))
					{
						value.TinTucs.Add(this);
						this._MaLoaiTT = value.MaLoaiTT;
					}
					else
					{
						this._MaLoaiTT = default(Nullable<int>);
					}
					this.SendPropertyChanged("LoaiTinTuc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.trangcon")]
	public partial class trangcon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _STT;
		
		private string _TenTrang;
		
		private string _Link;
		
		private string _Noidung;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSTTChanging(int value);
    partial void OnSTTChanged();
    partial void OnTenTrangChanging(string value);
    partial void OnTenTrangChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnNoidungChanging(string value);
    partial void OnNoidungChanged();
    #endregion
		
		public trangcon()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STT", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int STT
		{
			get
			{
				return this._STT;
			}
			set
			{
				if ((this._STT != value))
				{
					this.OnSTTChanging(value);
					this.SendPropertyChanging();
					this._STT = value;
					this.SendPropertyChanged("STT");
					this.OnSTTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenTrang", DbType="NVarChar(50)")]
		public string TenTrang
		{
			get
			{
				return this._TenTrang;
			}
			set
			{
				if ((this._TenTrang != value))
				{
					this.OnTenTrangChanging(value);
					this.SendPropertyChanging();
					this._TenTrang = value;
					this.SendPropertyChanged("TenTrang");
					this.OnTenTrangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Noidung", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Noidung
		{
			get
			{
				return this._Noidung;
			}
			set
			{
				if ((this._Noidung != value))
				{
					this.OnNoidungChanging(value);
					this.SendPropertyChanging();
					this._Noidung = value;
					this.SendPropertyChanged("Noidung");
					this.OnNoidungChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
